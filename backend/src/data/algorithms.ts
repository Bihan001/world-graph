import { AlgorithmsData } from '../utils/interfaces/misc';

export const algorithmsData: AlgorithmsData = {
  contractionHierarchy: {
    key: 'contractionHierarchy',
    displayName: 'Contraction Hierarchy',
    timeComplexity: 'O(V + E)',
    spaceComplexity: 'O(V)',
    description: 'lorem ipsum',
    requirements: 'Weighted',
  },
  bfs: {
    key: 'bfs',
    displayName: 'Breadth First Search',
    timeComplexity: 'O(V + E)',
    spaceComplexity: 'O(V)',
    description: 'lorem ipsum',
    requirements: 'Unweighted, Acyclic',
  },
  dfs: {
    key: 'dfs',
    displayName: 'Depth First Search',
    timeComplexity: 'O(V + E)',
    spaceComplexity: 'O(V)',
    description: 'lorem ipsum',
    requirements: 'Unweighted, Acyclic',
  },
  dijkstra: {
    key: 'dijkstra',
    displayName: "Dijkstra's Algorithm",
    timeComplexity: 'O(V.log(E))',
    spaceComplexity: 'O(V)',
    description: 'SSSP lorem ipsum',
    requirements: 'Weighted, No negative edge cycles',
  },
  bidirectionalDijkstra: {
    key: 'bidirectionalDijkstra',
    displayName: "Bidirectional Dijkstra's Algorithm",
    timeComplexity: 'O(V.log(E)/2)',
    spaceComplexity: 'O(V)',
    description: 'SSSP lorem ipsum',
    requirements: 'Weighted, No negative edge cycles',
  },
  aStar: {
    key: 'aStar',
    displayName: 'A* Algorithm',
    timeComplexity: 'O(V.log(E))',
    spaceComplexity: 'O(V)',
    description: 'SSSP lorem ipsum',
    requirements: 'Weighted, No negative edge cycles',
  },
  bidirectionalAStar: {
    key: 'bidirectionalAStar',
    displayName: 'Bidirectional A* Algorithm',
    timeComplexity: 'O(V.log(E))',
    spaceComplexity: 'O(V)',
    description: 'SSSP lorem ipsum',
    requirements: 'Weighted, No negative edge cycles',
  },
  bidirectionalAStarALT: {
    key: 'bidirectionalAStarALT',
    displayName: 'ALT Bidirectional A* Algorithm',
    timeComplexity: 'O(V.log(E))',
    spaceComplexity: 'O(V)',
    description: 'SSSP lorem ipsum',
    requirements: 'Weighted, No negative edge cycles',
  },
  bellmanFord: {
    key: 'bellmanFord',
    displayName: "Bellman Ford's Algorithm",
    timeComplexity: 'O(V.E)',
    spaceComplexity: 'O(V)',
    description: 'SSSP lorem ipsum',
    requirements: 'Weighted',
  },
  floydWarshall: {
    key: 'floydWarshall',
    displayName: "Floyd Warshall's Algorithm",
    timeComplexity: 'O(V^3)',
    spaceComplexity: 'O(V)',
    description: 'APSP lorem ipsum',
    requirements: 'Weighted',
  },
};
